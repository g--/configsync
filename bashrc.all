alias help='${HELP_COMMAND}'
function _base_help {


cat <<EOF
󰡨 Docker and kubernetes 󰡨 
    dc docker-compose

󰪴 Misc 󰪴 
    ts2date - convert unix timestamp into human readable
    unixtime - current time in seconds since epoch
    tf - terraform

󱃾 Kubernetes 󱃾  
     k - kubectl
     kg - 'kubectl get'
     kga - 'kubectl get --all-namespaces'
     kd - 'kubectl describe'
     ky - 'kubectl get -o yaml'
     kl - 'kubectl logs'
     ke - 'kubectl edit'
     kl - 'kubectl logs'
     kn - change namespace
     kx - 'kubectl exec -ti'
     kgn <namespace> - dump all resources for the given namespace
     kshell - create a pod and execute a shell on it

 Git flow  
    nb <tab> - new branch
    gcommit <files> - commit (populates a message template)
    gamend -  amend comit with updated files
    gmessage - amend comit message
    gdiff - compare main with HEAD
    gpush -  fetch, rebase, push
    rebase - fetch, rebase
    rebase_interactive - interactive rebase from trunk up
    main - checkout origin/main
    branch_status - summary of what's in this branch
    gprunesquashmerged - prune old branches
    ghg - github grep
EOF
}
HELP_COMMAND=_base_help

alias tf='terraform'

alias dc='docker-compose'
alias dcl='docker-compose logs -f'
alias dck='docker-compose kill'
alias dcrm='docker-compose rm'

alias py2=python2
alias py=python3
alias py3=python3

export EDITOR=`which nvim || which vim || which vi`
export GET_EDITOR=${EDITOR}

alias gamend='_there_is_a_commit_to_amend && git commit -a --amend --no-edit'
alias gmessage='_there_is_a_commit_to_amend && git commit --amend'
alias gpush='_on_a_branch && rebase && git push --force'

# idea: use --template to include the url.
alias ghg='gh search code --owner ${GITHUB_ORG}'

function gprunesquashmerged() {
  MAIN=`git rev-parse --abbrev-ref HEAD`
  git checkout -q ${MAIN} && git for-each-ref refs/heads/ "--format=%(refname:short)" | while read branch; do mergeBase=$(git merge-base ${MAIN} $branch) && [[ $(git cherry ${MAIN} $(git commit-tree $(git rev-parse "$branch^{tree}") -p $mergeBase -m _)) == "-"* ]] && git branch -D $branch; done
}

alias k=kubectl
alias vi=${EDITOR}
alias kshell='kubectl run -i --tty --rm geoffo-debug --image=nicolaka/netshoot --restart=Never -- sh'
alias ky='kubectl get -o yaml'
alias kl='kubectl logs'
alias ke='kubectl edit'
alias kg='kubectl get'
alias kga='kubectl get --all-namespaces'
alias kd='kubectl describe'
alias kl='kubectl logs'
alias kn='kubectl config set-context --current --namespace'
alias kx='kubectl exec -ti'
alias kgn='kubectl api-resources --verbs=list --namespaced -o name  | xargs -n 1 kubectl get --show-kind --ignore-not-found  -n'

function ts2date () {
${GNU_DATE} -d \@${1}
}
alias unixtime='${GNU_DATE} +%s'

export HISTSIZE=
export HISTFILESIZE=
export HISTFILE=~/.bash_eternal_history


eval $(gpg-connect-agent --quiet /bye)
export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"

_branch() {
  if git rev-parse --git-dir > /dev/null 2>&1; then
     echo -n `git rev-parse --abbrev-ref HEAD`
  else
     echo -n ""
  fi
}
export -f _branch

_ticket() {
  BRANCH=`_branch`
  if [[ "$BRANCH" =~ "/" ]]; then
     echo -n $BRANCH | cut -f 1 -d "/"
  elif [[ -e "$PWD/.ticket" ]]; then
     cat "$PWD/.ticket"
  else
     echo -n ""
  fi
}
export -f _ticket

_branch_no_ticket() {
  BRANCH=`_branch`
  if [[ "$BRANCH" =~ "/" ]]; then
     echo -n $BRANCH | cut -f 2 -d "/"
  else
     echo -n $BRANCH
  fi
}

_window_title() {
  if git rev-parse --git-dir > /dev/null 2>&1; then
     ROOT=`git rev-parse --show-toplevel`
     echo -n "${ROOT##*/}: "
     echo -n `_branch_no_ticket`
  else
     echo -n "$PWD"
  fi
}

function branch_status() {
  read -r -d '' GH_TEMPLATE <<'EOT'
    {{- if .currentBranch }}
      {{- if eq .currentBranch.state "MERGED" -}}
        PR is MERGED (see {{ .currentBranch.url }})
      {{- else -}}
        PR is {{.currentBranch.state}} {{.currentBranch.reviewDecision}} {{.currentBranch.url}}
      {{- end -}}{{ printf "\n" }}
    {{- end -}}
EOT

  # GH_TEMPLATE='{{if .currentBranch }}{{ if eq .currentBranch.state "MERGED" }}PR is MERGED (see {{ .currentBranch.url }}){{ else }}PR is {{.currentBranch.state}} {{.currentBranch.reviewDecision}} {{.currentBranch.url}}{{ printf "\n" }}{{ end }}{{ end }}'

  PR_STATUS=`gh pr status --json mergeStateStatus,state,title,url,id,reviewDecision --template "${GH_TEMPLATE}"`

  if [[ "${PR_STATUS}" == *" MERGED "* ]]; then
    echo "${PR_STATUS}"

    return 1
  fi

  MAIN=`git rev-parse --abbrev-ref origin/HEAD`
  BASE=`git merge-base $MAIN HEAD`
  git log --format=oneline --decorate=no $BASE..HEAD
  git diff --name-status $BASE..HEAD

  echo "${PR_STATUS}"
}

function rebase_interactive() {
  MAIN=`git rev-parse --abbrev-ref origin/HEAD`
  BASE=`git merge-base $MAIN HEAD`
  git rebase -i $BASE
}


function gdiff() {
  MAIN=`git rev-parse --abbrev-ref origin/HEAD`
  BASE=`git merge-base $MAIN HEAD`
  git diff $BASE..HEAD
}

export PS1='\h:\W \u \$ '
_prompt_command() {
    local EXIT="$?"             # This needs to be first
	history -a

  THING=`_window_title`
  #echo -ne "\033];${THING}\007";
  echo -ne "\x1b]1;${THING}\x1b\\";

    PS1=""

    local RCol='\[\e[0m\]'
    local Red='\[\e[0;31m\]'
    local Gre='\[\e[0;32m\]'
    local BYel='\[\e[1;33m\]'
    local BBlu='\[\e[1;34m\]'
    local Pur='\[\e[0;35m\]'

    PS1+="\u@\h \W"

    if command -v terraform &> /dev/null
    then
       CURRENT_TF=`terraform workspace show`
       if [ $? == 0 ] && [ "${CURRENT_TF}" != "default" ]; then
         PS1+="${BBlu} ${CURRENT_TF}${RCol}"
       fi
    fi

    if [ $EXIT != 0 ]; then
        PS1+="${Red}$ ${RCol}"      # Add red if exit code non 0
    else
        PS1+="$ ${RCol}"
    fi
}

# Do this before setting prompt command
eval "$(direnv hook bash)"

if [ $ITERM_SESSION_ID  ] || [ "$TERM_PROGRAM" == "WezTerm" ]; then
  export PROMPT_COMMAND='_prompt_command'
fi


function nb () {
  if [[ "$1" == "" ]]; then
    echo "usage: nb <branchname>"
    return
  fi
  if [[ "$2" == "" ]]; then
     MAIN=`git rev-parse --abbrev-ref origin/HEAD`
     if [[ $? != 0 ]]; then
       echo "Error: 'git rev-parse --abbrev-ref origin/HEAD' failed"
       return 1
     fi
  else
     MAIN=$2
  fi

  git fetch
  if [[ $? != 0 ]]; then
    echo "Error: 'git fetch' failed"
    return 1
  fi
  git checkout -b $1 $MAIN
  if [[ $? != 0 ]]; then
    echo "Error: 'git checkout -b $1 $MAIN' failed"
    return 1
  fi
  git push --set-upstream origin $1
  if [[ $? != 0 ]]; then
    echo "Error: 'git push --set-upstream origin $1' failed"
    return 1
  fi
}

function rebase () {
  git fetch
  git rebase `git rev-parse --abbrev-ref origin/HEAD`
}

function main() {
  git fetch
  git checkout `git rev-parse --abbrev-ref origin/HEAD`
}

function _there_is_a_commit_to_amend() {
  git diff-index --quiet `git rev-parse --abbrev-ref origin/HEAD`
  CODE=$?
  if [[ $CODE != 0 ]]; then
    return 0
  else
    echo "There is no commit on this branch yet."
    return 1
  fi
}

function _on_a_branch() {
  CURRENT=`git branch --show-current`
  MAIN=`git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'`
  if [[ "${CURRENT}" == "${MAIN}" ]]; then
    echo "The current branch is ${MAIN}, which is the main branch for this repo."
    return 1
  elif [[ `git rev-parse --abbrev-ref --symbolic-full-name HEAD` == "HEAD" ]]; then
    echo "Currently on a detached head."
    return 1
  else
    return 0
  fi
}

# after, so local can override
source ~/.bash_local_aliases

